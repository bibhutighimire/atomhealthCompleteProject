// <auto-generated />
using System;
using AtomHealth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AtomHealth.Migrations
{
    [DbContext(typeof(AtomHealthDBContext))]
    [Migration("20210102191456_changesthrewe")]
    partial class changesthrewe
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AtomHealth.Areas.Identity.Data.AtomHealthUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CovidDetails")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diet")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Exercise")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FamilyDoctorName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GeneticTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasAllergy")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("HasPastSurgery")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImmunizationRecord")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IsInMedicaion")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastMedicalHistoryDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastSurgeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Province")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RelationshipToEmergencyContact")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<string>("doYouConsumeAlcohol")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("doYouIllegalDrugs")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("doYouSmoke")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("hasGeneticTest")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AtomHealth.Models.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AtomHealth.Models.CovidHistory", b =>
                {
                    b.Property<Guid>("CovidHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CovidHistoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("CovidHistoryID");

                    b.ToTable("CovidHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.CovidHistoryRec", b =>
                {
                    b.Property<Guid>("CovidHistoryRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CovidHistoryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CovidHistoryID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CovidHistoryRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("CovidHistoryID1");

                    b.ToTable("CovidHistoryRec");
                });

            modelBuilder.Entity("AtomHealth.Models.CurrentMedicalCondition", b =>
                {
                    b.Property<Guid>("CurrentMedicalConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentMedicalConditionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("CurrentMedicalConditionID");

                    b.ToTable("CurrentMedicalCondition");
                });

            modelBuilder.Entity("AtomHealth.Models.CurrentMedicalConditionRec", b =>
                {
                    b.Property<Guid>("CurrentMedicalConditionRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentMedicalConditionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentMedicalConditionID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurrentMedicalConditionRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("CurrentMedicalConditionID1");

                    b.ToTable("CurrentMedicalConditionRec");
                });

            modelBuilder.Entity("AtomHealth.Models.FamilyMedicalHistory", b =>
                {
                    b.Property<Guid>("FamilyMedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FamilyMedicalHistoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("FamilyMedicalHistoryID");

                    b.ToTable("FamilyMedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.FamilyMedicalHistoryRec", b =>
                {
                    b.Property<Guid>("FamilyMedicalHistoryRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FamilyMedicalHistoryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FamilyMedicalHistoryID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FamilyMedicalHistoryRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("FamilyMedicalHistoryID1");

                    b.ToTable("FamilyMedicalHistoryRec");
                });

            modelBuilder.Entity("AtomHealth.Models.Immunization", b =>
                {
                    b.Property<Guid>("ImmunizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImmunizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("ImmunizationID");

                    b.ToTable("Immunization");
                });

            modelBuilder.Entity("AtomHealth.Models.MedicalCoverage", b =>
                {
                    b.Property<Guid>("MedicalCoverageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Coverage")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HasMedicalCoverage")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HealthCarePlan")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HealthID")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MedicalCoverageID");

                    b.HasIndex("AtomHealthUserID");

                    b.ToTable("MedicalCoverage");
                });

            modelBuilder.Entity("AtomHealth.Models.MedicalHistory", b =>
                {
                    b.Property<Guid>("MedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicalHistoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("MedicalHistoryID");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.PastMedicalHistory", b =>
                {
                    b.Property<Guid>("PastMedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PastMedicalHistoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isChecked")
                        .HasColumnType("bit");

                    b.HasKey("PastMedicalHistoryID");

                    b.ToTable("PastMedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.PastMedicalHistoryRec", b =>
                {
                    b.Property<Guid>("PastMedicalHistoryRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PastMedicalHistoryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PastMedicalHistoryID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PastMedicalHistoryRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("PastMedicalHistoryID1");

                    b.ToTable("PastMedicalHistoryRec");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientCountryRecord", b =>
                {
                    b.Property<Guid>("PatientCountryRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProvinceID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientCountryRecordID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("CountryID1");

                    b.HasIndex("ProvinceID1");

                    b.ToTable("PatientCountryRecord");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientImmunizationRec", b =>
                {
                    b.Property<Guid>("PatientImmunizationRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImmunizationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImmunizationID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientImmunizationRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("ImmunizationID1");

                    b.ToTable("PatientImmunizationRec");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientMedicalHistoryRec", b =>
                {
                    b.Property<Guid>("PatientMedicalHistoryRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalHistoryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalHistoryID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientMedicalHistoryRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("MedicalHistoryID1");

                    b.ToTable("PatientMedicalHistoryRec");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientProvinceRec", b =>
                {
                    b.Property<Guid>("PatientProvinceRecID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtomHealthUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProvinceID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PatientProvinceRecID");

                    b.HasIndex("AtomHealthUserID");

                    b.HasIndex("CountryID1");

                    b.HasIndex("ProvinceID1");

                    b.ToTable("PatientProvinceRec");
                });

            modelBuilder.Entity("AtomHealth.Models.Province", b =>
                {
                    b.Property<Guid>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("AtomHealth.Models.Subscribe", b =>
                {
                    b.Property<Guid>("subscribeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("subscribeid");

                    b.ToTable("Subscribe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AtomHealth.Models.CovidHistoryRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.CovidHistory", "CovidHistory")
                        .WithMany()
                        .HasForeignKey("CovidHistoryID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("CovidHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.CurrentMedicalConditionRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.CurrentMedicalCondition", "CurrentMedicalCondition")
                        .WithMany()
                        .HasForeignKey("CurrentMedicalConditionID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("CurrentMedicalCondition");
                });

            modelBuilder.Entity("AtomHealth.Models.FamilyMedicalHistoryRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.FamilyMedicalHistory", "FamilyMedicalHistory")
                        .WithMany()
                        .HasForeignKey("FamilyMedicalHistoryID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("FamilyMedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.MedicalCoverage", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.Navigation("AtomHealthUser");
                });

            modelBuilder.Entity("AtomHealth.Models.PastMedicalHistoryRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.PastMedicalHistory", "PastMedicalHistory")
                        .WithMany()
                        .HasForeignKey("PastMedicalHistoryID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("PastMedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientCountryRecord", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID1");

                    b.HasOne("AtomHealth.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientImmunizationRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.Immunization", "Immunization")
                        .WithMany()
                        .HasForeignKey("ImmunizationID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("Immunization");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientMedicalHistoryRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.MedicalHistory", "MedicalHistory")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("AtomHealth.Models.PatientProvinceRec", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", "AtomHealthUser")
                        .WithMany()
                        .HasForeignKey("AtomHealthUserID");

                    b.HasOne("AtomHealth.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID1");

                    b.HasOne("AtomHealth.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID1");

                    b.Navigation("AtomHealthUser");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AtomHealth.Areas.Identity.Data.AtomHealthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
